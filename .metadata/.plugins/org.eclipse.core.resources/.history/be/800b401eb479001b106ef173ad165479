package com.ceiba.prueba.rest;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ceiba.prueba.modelo.Persona;
import com.ceiba.prueba.service.PersonaService;
import com.ceiba.prueba.utils.InvalidDataException;

@RestController
@RequestMapping("/api/persona/")
public class PersonaREST {

	@Autowired
	private PersonaService personaService;

	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	private ResponseEntity<Persona> guardar(@Valid @RequestBody Persona persona,BindingResult result) {
		Persona temporal = personaService.create(persona);
		
		if (result.hasErrors()) {
			throw new InvalidDataException(result);
		}
		
		try {
			return ResponseEntity.created(new URI("/api/persona" + temporal.getId())).body(temporal);
		} catch (InvalidDataException | URISyntaxException | IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
		

//		try {
//			return ResponseEntity.created(new URI("/api/persona" + temporal.getId())).body(temporal);
//
//		} catch (InvalidDataException | URISyntaxException e) {
//			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
//		}
	}

//	@PostMapping
//	@ResponseStatus(HttpStatus.CREATED)
//	public Integer create(@Valid @RequestBody Usuario usuario, BindingResult result) {
//		logger.debug("Creando usuario con data {}", usuario);
//		if (result.hasErrors()) {
//			throw new InvalidDataException(result);
//		}
//		usuario = usuarioService.create(usuario);
//		return usuario.getId();
//	}

	@GetMapping
	private ResponseEntity<List<Persona>> listarTodasLasPersona() {
		return ResponseEntity.ok(personaService.getAllPersonas());
	}

	@DeleteMapping
	private ResponseEntity<Void> eliminarPersona(@RequestBody Persona persona) {
		personaService.delete(persona);
		return ResponseEntity.ok().build();
	}

	// @GetMapping (value = "{id}")
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	private ResponseEntity<Optional<Persona>> listarPersonasPorID(@PathVariable("id") Long id) {
		return ResponseEntity.ok(personaService.findById(id));
	}

}
